코딩 파트너로서 말씀하신 프로젝트의 목표와 요구사항을 명확히 하고, 개발을 위한 구체적인 설계가 담긴 **하위 수준 설계 문서(Low-Level Design, LLD)** 형식으로 정리해 드릴게요. 기술적인 구현 코드 대신, **기능 정의, 데이터 구조, 사용자 흐름**에 초점을 맞추겠습니다.

## 📝 공유 가이드북 프로젝트: LLD (Low-Level Design) 문서

---

### 1. 시스템 목표 및 사용자 흐름 정의

| 사용자 역할 | 주요 목표 | 핵심 기능 |
| :--- | :--- | :--- |
| **사용자 A (보낸이)** | 맞춤형 가이드북을 빠르고 안정적으로 공유하고 싶다. | 가이드 선택 $\rightarrow$ HTML 파일 생성/다운로드 $\rightarrow$ DB에 공유 기록 저장 |
| **사용자 B (수신자)** | 공유된 가이드북을 오프라인에서 쉽게 열람하고, 앱으로 연결하고 싶다. | 카톡 파일 수신 $\rightarrow$ 오프라인 HTML 열람 $\rightarrow$ 앱 내 갤러리로 이동(딥 링크) |
| **관리자** | 공유된 모든 가이드북을 체계적으로 관리하고, 사용 현황을 파악하고 싶다. | 공유 목록 확인 $\rightarrow$ 다운로드/재공유 $\rightarrow$ 통계 확인 |

---

### 2. 데이터 구조 설계 (DB 스키마)

관리자 갤러리 및 통계 기록을 위해 필요한 최소한의 데이터베이스 구조(테이블)입니다.

#### 📁 `SharedGuide` 테이블 (공유된 가이드북 정보)

| 필드 이름 | 데이터 타입 | 설명 | 제약 조건 |
| :--- | :--- | :--- | :--- |
| `id` | Integer (PK) | 고유 식별자 | 자동 증가, 기본 키 |
| `share_id` | String | 공유 URL에 사용될 짧은 ID (예: `6wpfEQ`) | 고유 값 |
| `title` | String | 생성된 HTML 파일의 제목 (예: "파리3") | Null 허용 안 함 |
| `sender_name` | String | 공유한 사용자 A의 이름 | Null 허용 (인증 전) |
| `created_at` | DateTime | 공유 파일 생성 일시 | 자동 생성 |
| `file_path` | String | 서버 내 HTML 파일의 실제 저장 경로 | |
| `is_gps_verified` | Boolean | 콘텐츠에 GPS 연동 사진이 포함되었는지 여부 | 기본값: False |

#### 📈 `AccessLog` 테이블 (접속/통계 기록)

| 필드 이름 | 데이터 타입 | 설명 | 제약 조건 |
| :--- | :--- | :--- | :--- |
| `id` | Integer (PK) | 고유 식별자 | 자동 증가, 기본 키 |
| `share_id` | String (FK) | `SharedGuide` 테이블의 `share_id` 참조 | 외래 키 |
| `access_type` | String | 접근 유형 ("VIEW", "DOWNLOAD", "APP\_REDIRECT", "RESHARE") | |
| `accessed_at` | DateTime | 접근 발생 시각 | 자동 생성 |
| `user_agent` | String | 접속한 기기/브라우저 정보 (선택적) | |

---

### 3. 공유 페이지 (HTML 파일) 모듈 및 UX 설계

사용자 B에게 전달될 핵심 모듈인 **오프라인 HTML 파일**의 구성 요소와 UX/문구 지침입니다.

#### A. HTML 파일 구성 요소

1.  **헤더 영역 (Header Module)**
    * **문구:** **"${보낸이}님의 여행 편지 도착 💌"** 또는 **"소중한 추억을 공유한 사람: ${보낸이}님"**
    * **정보:** **[타이틀(${title})]**, **[생성일(${created\_at})]**
2.  **신뢰 정보 영역 (Trust Module)**
    * **문구:** "이 가이드는 **[GPS 정보]**에서 시작되었습니다."
    * **정보:** **[위치 정보 필드]**, GPS 연동 사진 포함 여부.
3.  **콘텐츠 영역 (Content Module)**
    * **레이아웃:** 모바일 가독성을 위한 **2열 그리드 (2xN)** 구성.
    * **데이터:** 20~30개의 콘텐츠(사진, 텍스트)를 기존 앱의 UX를 유지하여 렌더링.
4.  **하단 액션 영역 (Footer/Action Module)**
    * **버튼:** **"이 가이드를 내 보관함에 담으러 가기 🚀"**
    * **기능:** 클릭 시 **딥 링크**(`myapp://gallery`)를 통해 **내손가이드 앱의 갤러리 페이지**로 이동.

#### B. UX/문구 가이드라인

* **톤앤매너:** AI가 만든 **인공적인 느낌을 순화**하고, 따뜻하고 친밀한 **'편지'** 또는 **'기록'**의 느낌을 강조합니다.
* **보낸이:** 필수로 표시하여 **스팸이 아닌 지인 메시지**라는 신뢰감을 줍니다. (인증 구현 시 `sender_name`을 기반으로 합니다.)
* **오프라인 가독성:** 폰트, 이미지 등 모든 스타일/데이터는 **HTML 파일 자체에 포함**시켜 인터넷 연결 없이도 완벽하게 표시되도록 합니다. (필요 시 Base64 인코딩 사용)

---

### 4. 관리자 기능 API 및 페이지 설계

| 관리자 메뉴 | 기능 정의 | API 엔드포인트 예시 |
| :--- | :--- | :--- |
| **갤러리 목록** | 공유된 모든 가이드북의 목록(제목, 보낸이, 생성일)을 표시합니다. | `GET /admin/shared/list` |
| **HTML 다운로드** | 목록에서 선택된 `share_id`에 해당하는 HTML 파일을 강제 다운로드합니다. | `GET /admin/shared/download/{share_id}` |
| **재공유** | 해당 가이드북의 짧은 URL을 다시 생성하여 관리자에게 제공합니다. | `GET /admin/shared/url/{share_id}` |
| **통계 확인** | 각 가이드북별 **접근 횟수(VIEW)** 및 **앱 리디렉션 횟수(APP\_REDIRECT)**를 보여줍니다. | `GET /admin/shared/stats/{share_id}` |

이 LLD 문서는 이제 개발팀이 **어떤 기능을 어떤 방식으로 만들지** 명확하게 알려주는 설계도가 됩니다. 이 구조를 기반으로 **Node.js, Python, 또는 원하는 언어**로 서버 코드를 작성해 나갈 수 있습니다.

혹시 이 구조를 바탕으로 **DB 스키마(예: SQL 코드)를 작성**하는 것부터 시작해 볼까요? 아니면 **HTML 템플릿의 내용**을 먼저 구성해 볼까요? 😊